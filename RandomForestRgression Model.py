# -*- coding: utf-8 -*-
"""FinalRF_NoG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IlPhMjTfE4MQPRY0FjgHk8BSENPSoyXo

# Random Forest Regression

We'll also try Random Forest regression on our data.

# Why random forest regression?

## Features and Advantages of Random Forest :

 - It is one of the most accurate learning algorithms available. For many data sets, it produces a highly accurate classifier.


- It runs efficiently on large databases.


- It can handle thousands of input variables without variable deletion.


- It gives estimates of what variables that are important in the classification.


- It generates an internal unbiased estimate of the generalization error as the forest building progresses.


- It has an effective method for estimating missing data and maintains accuracy when a large proportion of the data are missing.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression 
from sklearn.preprocessing import PolynomialFeatures

data=pd.read_csv("india_daily_data.csv")
data

active_cases=data['totalconfirmed']-data['totalrecovered']-data['totaldeceased']
data.insert(4,"activecases",active_cases,True)

ar=list(range(1,129))
data.insert(0,"Sl.No.",ar,True)

X = data.iloc[:,[0,4]].values
y = data.iloc[:,4].values

data.describe()

"""## Fitting the model"""

# Fitting Random Forest Regression to the dataset
from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor.fit(X, y)

y_pred = regressor.predict(X)

for i in y_pred:
    print(round(i,0))

"""# Metrics

Let's see how well our model has fit.
"""

import sklearn.metrics as metrics
from sklearn.model_selection import cross_val_score as cvs
def regression_results(y_true, y_pred):

    # Regression metrics
    explained_variance=metrics.explained_variance_score(y_true, y_pred)
    mean_absolute_error=metrics.mean_absolute_error(y_true, y_pred) 
    mse=metrics.mean_squared_error(y_true, y_pred) 
    mean_squared_log_error=metrics.mean_squared_log_error(y_true, y_pred)
    median_absolute_error=metrics.median_absolute_error(y_true, y_pred)
    r2=metrics.r2_score(y_true, y_pred)
    accuracy = cvs(estimator = regressor,X=X,y=y,cv=10)

    print('explained_variance: ', round(explained_variance,4))    
    print('mean_squared_log_error: ', round(mean_squared_log_error,4))
    print('r2: ', round(r2,4))
    print('MAE: ', round(mean_absolute_error,4))
    print('MSE: ', round(mse,4))
    print('RMSE: ', round(np.sqrt(mse),4))

regression_results(y,y_pred)